name: Deploy Infisical
on: workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: "Deploy"
    environment:
      name: idealjs-prod
    steps:
      - uses: actions/checkout@v4

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/tmp.key
          chmod 600 ~/.ssh/tmp.key
          cat >>~/.ssh/config <<END
          Host idealjs.com
            HostName $SSH_HOST
            User idealjs
            IdentityFile ~/.ssh/tmp.key
            StrictHostKeyChecking no
          END
        env:
          SSH_KEY: ${{ secrets.IDEALJS_ALI_SSH_KEY }}
          SSH_HOST: ${{ secrets.IDEALJS_ALI_SSH_HOST }}

      - name: Start Infisical
        run: |
          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> ~/.tmp.env
          echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> ~/.tmp.env
          echo "INFISICAL_AUTH_SECRET=$INFISICAL_AUTH_SECRET" >> ~/.tmp.env
          echo "INFISICAL_ENCRYPTION_KEY=$INFISICAL_ENCRYPTION_KEY" >> ~/.tmp.env
          ssh idealjs.com 'mkdir -p ~/workspace/infisical'
          scp ~/.tmp.env idealjs.com:~/workspace/infisical/.env
          scp ./packages/infisical/docker-compose.yml idealjs.com:~/workspace/infisical/docker-compose.yml
          ssh idealjs.com 'docker compose -f ~/workspace/infisical/docker-compose.yml up -d'
        env:
          POSTGRES_PASSWORD: ${{ secrets.IDEALJS_POSTGRES_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.IDEALJS_REDIS_PASSWORD }}
          INFISICAL_AUTH_SECRET: ${{ secrets.IDEALJS_INFISICAL_AUTH_SECRET }}
          INFISICAL_ENCRYPTION_KEY: ${{ secrets.IDEALJS_INFISICAL_ENCRYPTION_KEY }}

      - name: Clean
        if: always()
        run: |
          rm ~/.ssh/tmp.key
          rm ~/.tmp.env
